#baixar a imagem do repositório
$ docker pull ubuntu/nginx
$ docker pull nginx:alpine

#executar uma imagem baixada
$ docker container run --name meu-ubuntu ubuntu
$ docker container run --name meu-ubuntu2 -ti ubuntu
$ docker container run --name meu-nginx ubuntu/nginx
$ docker container run --name meu-nginx2 -d ubuntu/nginx
$ docker container run --name meu-nginx3 -d nginx:alpine

#entrando no container
$ docker exec -it meu-nginx3 sh
curl localhost

#listar containers em execução
$ docker container ls

#listar todos os containers
$ docker container ls -a

#parar o container
$ docker container stop ID_DO_CONTAINER

#reiniciar o container parado
$ docker container start ID_DO_CONTAINER

#remove o container caso ele esteja parado
$ docker container rm ID_DO_CONTAINER

#lista imagens de containers baixadas
$ docker image ls ID_DO_CONTAINER

#remove imagens de containers baixadas
$ docker image rm ID_DO_CONTAINER

#visualizar consumo de recursos do container
$ docker container stats
$ docker container stats ID_DO_CONTAINER

#visualizar processos em execução no container
$ docker container top ID_DO_CONTAINER

#visualizar logs container
$ docker container log ID_DO_CONTAINER
$ docker container log -f ID_DO_CONTAINER

#inspecionar detalhes do container
$ docker container inspec ID_DO_CONTAINER
$ docker container inspec ID_DO_CONTAINER | grep -i inspec

#configurar memória e cpu do containers
$ docker container run --name meu-ubuntu -d -m 512M --cpus=1 ubuntu/nginx

#atualizar memória e cpu do container em execução
$ docker container update -m 256m --cpus=0.5 meu-ubuntu

#vinculando arquivos e diretórios entre o host e o container (bind)
#docker container run --mount type=bind,source=diretorio_local,target=diretorio_do_container imagem
$ docker container run -d -p 80:80 --name servidorweb3 --mount type=bind,source=/home/vagrant/site,target=/usr/share/nginx/html nginx:alpine

#gerenciando volumes
$ docker volume create meu_volume
$ docker volume inspec meu_volume

#vinculando arquivos e diretórios entre o host e o container (volume)
#docker container run --mount type=volume,source=nome_volume,target=diretorio_do_container imagem
$ docker container run -d -it --name cliente --mount type=volume,source=meu_volume,target=/tmp alpine
$ docker run -d --name postgres-db -e POSTGRES_PASSWORD=password --mount type=volume,source=bdvolume,target=/var/lib/postgresql/data -p 5432:5432 postgres